dnl
dnl configure.in:
dnl Source for configure script.
dnl
dnl Process this file with autoconf to produce a configure script.
dnl
dnl Copyright (c) 2001 Mark Longair, Chris Lightfoot. All Rights Reserved.
dnl
dnl $Id$
dnl

AC_INIT(auth_mysql.c)
AC_CONFIG_AUX_DIR(config)
AM_CONFIG_HEADER(configuration.h)
AM_INIT_AUTOMAKE(tpop3d, "1.4.2")

AC_DEFINE_UNQUOTED(TPOP3D_VERSION, "$VERSION", [The tpop3d version number])

dnl Check which options are enabled...

dnl The various authentication options.

AC_ARG_ENABLE(auth-pam,
        [
The following options control the selection of authentication drivers, which
are responsible for authenticating users and selecting the locations of their
mailboxes.
 
  --enable-auth-pam       Enable PAM authentication. [default=yes]],
    [enable_pam=$enableval],
    [enable_pam="yes"])

AC_ARG_ENABLE(auth-passwd,
        [
  --enable-auth-passwd    Enable /etc/passwd authentication. [default=no]],
    [enable_auth_passwd=$enableval],
    [enable_auth_passwd="no"])

AC_ARG_ENABLE(shadow-passwords,
        [    --enable-shadow-passwords  auth_passwd should use /etc/shadow.
                               [default=no]],
    [enable_shadow=$enableval],
    [enable_shadow="no"])


AC_ARG_WITH(mailspool-directory,
    [
  The following option sets the fallback location for Unix user mailboxes (not
  those for virtual domain users). It can be overridden from the configuration
  file. Deprecated.

    --with-mailspool-directory=DIR  Set the mailspool directory.
                                    [default=not specified]],

    [mspool=$withval],
    [mspool=""])

AC_ARG_ENABLE(auth-mysql,
        [
  --enable-auth-mysql     Enable auth_mysql (vmail-sql) authentication.
                          [default=no]],
    [enable_auth_mysql=$enableval],
    [enable_auth_mysql="no"])

AC_ARG_WITH(mysql-root,
        [    --with-mysql-root=DIR     Set root of MySQL distribution used by auth_mysql.
                              Should contain include/mysql/mysql.h and
                              lib/mysql/libmysqlclient.so [default=/usr]
],
    [mysql_root=$withval],
    [mysql_root="/usr"])

AC_ARG_ENABLE(auth-ldap,
        [  --enable-auth-ldap      Enable authentication against an LDAP directory.
                          [default=no]],
    [enable_auth_ldap=$enableval],
    [enable_auth_ldap="no"])
    
AC_ARG_WITH(openldap-root,
        [    --with-openldap-root=DIR  Root directory of the OpenLDAP installation.
                              [default=/usr]
],
    [openldap_root=$withval],
    [openldap_root="/usr"])

AC_ARG_ENABLE(auth-flatfile,
        [  --enable-auth-flatfile  Enable authentication against /etc/passwd-style flat
                          files. [default=no]
],
    [enable_auth_flatfile=$enableval],
    [enable_auth_flatfile="no"])

AC_ARG_ENABLE(auth-other,
        [  --enable-auth-other     Enable authentication by an external program.
                          [default=no]
],
    [enable_auth_other=$enableval],
    [enable_auth_other="no"])

AC_ARG_ENABLE(auth-perl,
        [  --enable-auth-perl      Enable authentication by embedded perl subroutines.
                          [default=no]
],
    [enable_auth_perl=$enableval],
    [enable_auth_perl="no"])

dnl Mailbox types.

AC_ARG_ENABLE(mbox-bsd,
        [
The following options control the selection of mailbox drivers, which are
responsible for reading messages from disk and supplying them to the client.

  --enable-mbox-bsd       Enable support for traditional BSD mailbox format
                          [default=yes]],
    [enable_mbox_bsd=$enableval],
    [enable_mbox_bsd="yes"])

AC_ARG_ENABLE(flock-locking,
    [
  The following options control the methods of file locking used by the
  mbox_bsd driver. See the INSTALL file for more information.
    
    --enable-flock-locking    Enable flock(2) locking [default=no]],
    [enable_flock=$enableval],
    [enable_flock=no])

AC_ARG_ENABLE(fcntl-locking,
    [    --enable-fcntl-locking    Enable fcntl(2) locking [default=yes]],
    [enable_fcntl=$enableval],
    [enable_fcntl=yes])

AC_ARG_ENABLE(dotfile-locking,
    [    --enable-dotfile-locking  Enable dotfile locking [default=yes]],
    [enable_dotfile=$enableval],
    [enable_dotfile=yes])

AC_ARG_ENABLE(cclient-locking,
    [    --enable-cclient-locking  Enable C-Client locking [default=yes]],
    [enable_cclient=$enableval],
    [enable_cclient=yes])

AC_ARG_ENABLE(cclient-fcntl,
    [    --enable-cclient-fcntl    Lock C-Client lockfiles with fcntl(2),
                              rather than flock(2). [default=no]
],

    [enable_cclient_uses_fcntl=$enableval],
    [enable_cclient_uses_fcntl=no])

AC_ARG_ENABLE(mbox-bsd-save-indices,
    [  tpop3d can cache metadata for BSD mailboxes, which may give a
  substantial performance improvement if you have many users who leave mail
  on the server. This feature should be considered experimental.

    --enable-mbox-bsd-save-indices 
                              Save a metadata cache for BSD mailboxes
                              [default=no]
],
    [enable_mbox_bsd_save_indices=$enableval],
    [enable_mbox_bsd_save_indices=no])

AC_ARG_ENABLE(mbox-maildir,
    [ --enable-mbox-maildir    Enable support for the Maildir format of Qmail
                          [default=no]],
    [enable_mbox_maildir=$enableval],
    [enable_mbox_maildir="no"])


dnl Suppress metadata messages used by C-Client
AC_ARG_ENABLE(suppress-cclient-metadata,
    [
The following options control miscellaneous features.
    
  --enable-suppress-cclient-metadata  Suppress C-Client metadata [default=yes]],
    [enable_suppress_cclient_metadata=$enableval],
    [enable_suppress_cclient_metadata=yes])


dnl Choose the type of messages the server sends users...
AC_ARG_ENABLE(snide-comments,
        [  --disable-snide-comments            Use less snide responses],
    [enable_snide=$enableval],
    [enable_snide="yes"])

dnl Give the option of using libwrap for TCP wrappers.
AC_ARG_ENABLE(tcp-wrappers,
        [  --enable-tcp-wrappers               Enable hosts.allow-style access control
                                      using TCP Wrappers [default=no]],
    [enable_tcp_wrappers=$enableval],
    [enable_tcp_wrappers="no"])

dnl Enable support for DRAC (dynamic relay access control).
AC_ARG_ENABLE(drac,
        [  --enable-drac                        Enable support for using the DRAC RPC
                                      protocol for POP-before-SMTP relaying
                                      [default=no]],
    [enable_drac=$enableval],
    [enable_drac=no])

dnl Some options mainly useful for development/debugging.

dnl Note the ugliness I've used to put a note in the output of
dnl ./configure --help; there ought to be a better way to do this.

AC_ARG_ENABLE(electric-fence,
    [
The following options will be of interest to developers, or in the event that
you have trouble with tpop3d:

  --enable-electric-fence Enable Electric Fence debugging support.
                          [default=no]],
    [enable_efence=$enableval],
    [enable_efence=no])

AC_ARG_ENABLE(backtrace,
    [  --enable-backtrace      Enable backtrace(3) reporting for crash debugging.
                          [default=no]
        
Confused? You should be. Read the INSTALL file for more information.
],
    [enable_backtrace=$enableval],
    [enable_backtrace=no])

dnl Now do some configuration based on these options; nothing done
dnl here should have awkward dependencies.

dnl Authentication drivers.
if test x"$enable_pam" = x"yes"
then
    AC_DEFINE(AUTH_PAM,1,[Use PAM authentication.])
fi

if test x"$enable_auth_passwd" = x"yes" || test x"$enable_shadow" = x"yes"
then
    AC_DEFINE(AUTH_PASSWD,1,[Use /etc/passwd style authentication.])
fi

if test x"$enable_shadow" = x"yes"
then
    AC_DEFINE(AUTH_PASSWD_SHADOW,1,[Use shadow password authentication.])
fi

if test x"$enable_auth_mysql" = x"yes"
then
    AC_DEFINE(AUTH_MYSQL,1,[Use vmail-sql style authentication.])
fi

if test x"$enable_auth_ldap" = x"yes"
then
    AC_DEFINE(AUTH_LDAP,1,[Use LDAP authentication.])
fi

if test x"$enable_auth_flatfile" = x"yes"
then
    AC_DEFINE(AUTH_FLATFILE,1,[Use flat file authentication.])
fi


if test x"$enable_auth_other" = x"yes"
then
    AC_DEFINE(AUTH_OTHER,1,[Use an external program for authentication.])
    dnl all machines should have -lm, so don't check for it
    LDFLAGS="$LDFLAGS -lm"  
fi

if test x"$enable_auth_perl" = x"yes"
then
    AC_DEFINE(AUTH_PERL,1,[Use an embedded perl interpreter for authentication.])
fi

dnl Mailbox drivers
if test x"$enable_mbox_bsd" = x"yes"
then
    AC_DEFINE(MBOX_BSD,1,[Enable support for BSD mailspools.])

    dnl Various locking options apply:
    if test x"$enable_cclient" = x"yes"
    then
        AC_DEFINE(WITH_CCLIENT_LOCKING,1,[Turns on C-Client locking.])
    fi

    if test x"$enable_cclient_uses_fcntl" = x"yes"
    then
        AC_DEFINE(CCLIENT_USES_FCNTL,1,[Use fcntl(2) rather than flock(2) to lock C-Client lock files.])
    fi

    if test x"$enable_dotfile" = x"yes"
    then
        AC_DEFINE(WITH_DOTFILE_LOCKING,1,[Use NFS safe dotfile locking.])
    fi

    if test x"$enable_flock" = x"yes"
    then
        AC_DEFINE(WITH_FLOCK_LOCKING,1,[Turns on flock(2) locking.])
    fi

    if test x"$enable_fcntl" = x"yes"
    then
        AC_DEFINE(WITH_FCNTL_LOCKING,1,[Turns on fcntl(2) locking.])
    fi

    if test x"$enable_mbox_bsd_save_indices" = x"yes"
    then
        AC_DEFINE(MBOX_BSD_SAVE_INDICES,1,[Cache mailspool metadata.])
    fi
fi

if test x"$enable_mbox_maildir" = x"yes"
then
    AC_DEFINE(MBOX_MAILDIR,1,[Enable support for Qmail-style maildir mailboxes.])
fi

if test x"$enable_suppress_cclient_metadata" = x"yes"
then
    AC_DEFINE(IGNORE_CCLIENT_METADATA,1,[Suppress the metadata messages stored by the WU C-client library.])
fi

if test x"$enable_snide" = x"no"
then
    AC_DEFINE(NO_SNIDE_COMMENTS,1,[Turns off responses to which some people object.])
fi

if test x"$enable_tcp_wrappers" = x"yes"
then
    AC_DEFINE(USE_TCP_WRAPPERS,1,[Enables TCP Wrappers for host-based access control.])
fi

if test x"$enable_drac" = x"yes"
then
    AC_DEFINE(USE_DRAC,1,[Enables notification of a DRAC daemon.])
fi

if test x"$enable_backtrace" = x"yes"
then
    AC_DEFINE(APPALLING_BACKTRACE_HACK,1,[Produce a backtrace if the program crashes.])
fi

if test x"$mspool" != x""
then
    AC_DEFINE_UNQUOTED(MAILSPOOL_DIR, "$mspool", [Fallback mailspool location.] )
fi

dnl Set up stuff for auth-mysql.
if test x"$enable_auth_mysql" = x"yes"
then
    LDFLAGS="$LDFLAGS -L$mysql_root/lib/mysql"
    dnl Also have to do CPPFLAGS, so that AC_CHECK_HEADER works...
    CPPFLAGS="$CPPFLAGS -I$mysql_root/include/mysql"
fi

dnl auth-ldap.
if test x"$enable_auth_ldap" = x"yes"
then
    LDFLAGS="$LDFLAGS -L$openldap_root/lib"
    dnl Also have to do CPPFLAGS, so that AC_CHECK_HEADER works...
    CPPFLAGS="$CPPFLAGS -I$openldap_root/include"
fi


dnl Checks for programs.
AC_PROG_CC

if test x"$enable_auth_perl" = x"yes"
then
    AC_PATH_PROG(PERL, "perl")
    CPPFLAGS="$CPPFLAGS "`$PERL -MExtUtils::Embed -e ccopts`
    LIBS="$LIBS "`$PERL -MExtUtils::Embed -e ldopts`
fi

dnl Checks for libraries.

AC_SEARCH_LIBS(socket, socket)
AC_CHECK_FUNC(gethostbyname, ,
	[AC_CHECK_LIB(nsl, gethostbyname)] )

if test x"$enable_efence" = x"yes"
then
    AC_CHECK_LIB(efence, main, [], AC_MSG_ERROR([electric fence enabled but can't find libefence...]))
    LDFLAGS="$LDFLAGS -umalloc -ufree -ucalloc -urealloc"
fi

# Some machines have crypt(3) in libcrypt; test for this.
if test x"$enable_auth_passwd" = x"yes" || test x"$enable_shadow" = x"yes" || test x"$enable_auth_mysql" = x"yes" || test x"$enable_auth_flatfile" = x"yes"
then
    AC_CHECK_LIB(crypt, crypt, , )
fi

# Some machines have dlopen etc. in libdl, and these are needed for PAM.
if test x"$enable_pam" = x"yes"
then
    AC_CHECK_LIB(dl, dlopen, , )
    AC_CHECK_LIB(pam, pam_start, [], AC_MSG_ERROR([[pam authentication enabled, but can't find libpam]]))
fi

# MySQL client libraries.
if test x"$enable_auth_mysql" = x"yes"
then
    AC_CHECK_LIB2(mysqlclient, main, [], AC_MSG_ERROR([[vmail-sql authentication enabled, but can't find libmysqlclient]]), -lz )
fi

# LDAP client libraries.
if test x"$enable_auth_ldap" = x"yes"
then
    AC_SEARCH_LIBS(res_query, resolv, [], AC_MSG_ERROR([[auth-ldap enabled, but no res_query(3)]]) )
    AC_CHECK_LIB(lber, main, [], AC_MSG_ERROR([[auth-ldap enabled, but can't find liblber]]) )
    AC_CHECK_LIB(ldap, main, [], AC_MSG_ERROR([[auth-ldap enabled, but can't find libldap]]) )
fi

# Where is nanosleep?
if test x"$enable_auth_other" = x"yes"
then
    AC_SEARCH_LIBS(nanosleep, rt, [], AC_MSG_ERROR([[auth-other enabled, but no nanosleep(2)]]) )
fi

if test x"$enable_tcp_wrappers" = x"yes"
then
    dnl nasty incantation stolen from openssh's configure script
    AC_CHECK_LIB(nsl, yp_match)
    LIBS="-lwrap $LIBS"
    AC_MSG_CHECKING(for libwrap)
    AC_TRY_LINK([
            #include <tcpd.h>
            int deny_severity = 0, allow_severity = 0;
        ], [
            hosts_access(0);
        ], [
            AC_MSG_RESULT(yes)
        ], [
            AC_MSG_ERROR([TCP Wrappers support enabled, but can't link against libwrap])
        ])
fi

if test x"$enable_drac" = x"yes"
then
dnl    AC_SEARCH_LIBS(dracauth, drac)
    AC_CHECK_LIB(drac, dracauth, [], AC_MSG_ERROR([[DRAC support enabled, but no dracauth(3)]]))
fi

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT

AC_CHECK_HEADERS(fcntl.h limits.h sys/file.h sys/time.h syslog.h unistd.h crypt.h execinfo.h security/pam_appl.h ldap.h mysql.h tcpd.h)

if test x"$enable_backtrace" = x"yes"
then
    if test x"$ac_cv_header_execinfo_h" != x"yes"
    then
        AC_MSG_ERROR( [backtrace enabled but can't find execinfo.h] )
    fi
fi

if test x"$enable_auth_passwd" = x"yes" || test x"$enable_shadow" = x"yes"
then
    if test x"$ac_cv_header_crypt_h" != x"yes"
    then
        AC_MSG_ERROR( [[passwd authentication enabled, but can't find crypt.h]] )
    fi
fi

if test x"$enable_pam" = x"yes"
then
    if test x"$ac_cv_header_security_pam_appl_h" != x"yes"
    then
        AC_MSG_ERROR( [[PAM authentication enabled, but can't find security/pam_appl.h]] )
    fi
fi

if test x"$enable_auth_mysql" = x"yes"
then
    if test x"$ac_cv_header_mysql_h" != x"yes"
    then
        AC_MSG_ERROR( [[vmail-sql authentication enabled, but can't find mysql.h]] )
    fi
fi

if test x"$enable_auth_ldap" = x"yes"
then
    if test x"$ac_cv_header_ldap_h" != x"yes"
    then
        AC_MSG_ERROR( [[LDAP authentication enabled, but can't find ldap.h]] )
    fi
fi

if test x"$enable_flock" = x"yes" || test x"$enable_cclient" = x"yes" && test x"$enable_cclient_uses_fcntl" = x"no"
then
    if test x"$ac_cv_header_sys_file_h" != x"yes"
    then
        AC_MSG_ERROR( [flock locking enabled (perhaps for cclient), but can't find sys/file.h] )
    fi
fi

if test x"$enable_fcntl" = x"yes" || test x"$enable_cclient" = x"yes" && test x"$enable_cclient_uses_fcntl" = x"yes"
then

    if test x"$ac_cv_header_fcntl_h" != x"yes"
    then
        AC_MSG_ERROR( [fcntl needed but can't find fcntl.h] )
    fi

    if test x"$ac_cv_header_unistd_h" != x"yes"
    then
        AC_MSG_ERROR( [fcntl needed but can't find unistd.h] )
    fi

fi

if test x"$enable_tcp_wrappers" = x"yes"
then
    if test x"$ac_cv_header_tcpd_h" != x"yes"
    then
        AC_MSG_ERROR( [TCP Wrappers enabled but can't find tcpd.h] )
    fi
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_UID_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME

dnl Checks for library functions.
AC_FUNC_MEMCMP
AC_FUNC_MMAP

AC_CHECK_FUNCS(gettimeofday select socket strcspn strdup strerror strspn strstr strtol uname strtok_r inet_aton)

if test x"$enable_backtrace" = x"yes"
then
    AC_CHECK_FUNC(backtrace, [], AC_MSG_ERROR([backtrace enabled but backtrace doesn't seem to be available.]))

fi

if test x"$enable_flock" = x"yes" || test x"$enable_cclient" = x"yes" && test x"$enable_cclient_uses_fcntl" = x"no"
then
    AC_CHECK_FUNC(flock, [], AC_MSG_ERROR([flock locking enabled (perhaps for cclient) but flock doesn't seem available.]))

fi

if test x"$enable_fcntl" = x"yes"
then
    AC_CHECK_FUNC(fcntl, [], AC_MSG_ERROR([fcntl locking enabled but fcntl doesn't seem available.]))

fi

if test x"$enable_auth_passwd" = x"yes" || test x"$enable_shadow" = x"yes"
then
    AC_CHECK_FUNC(crypt, [], AC_MSG_ERROR([[passwd authentication enabled, but crypt doesn't seem to be available.]]))

fi

if test x"$enable_pam" = x"yes"
then
    AC_CHECK_FUNC(pam_authenticate, [], AC_MSG_ERROR([[PAM authentication enabled, but pam_authenticate doesn't seem to be available.]]))

fi

if test x"$enable_auth_mysql" = x"yes"
then
    AC_CHECK_FUNC(mysql_init, [], AC_MSG_ERROR([[vmail-sql authentication enabled, but mysql_init doesn't seem to be available.]]))

fi

if test x"$enable_auth_ldap" = x"yes"
then
    AC_CHECK_FUNC(ldap_open, [], AC_MSG_ERROR([[LDAP authentication enabled, but ldap_open doesn't seem to be available.]]))

fi

dnl If flock and fcntl are selected, there's a chance that they
dnl will deadlock.  We do a test for this here...

if test x"$enable_fcntl" = x"yes" && test x"$enable_flock" = x"yes"
then
    AC_MSG_CHECKING(checking if fcntl and flock locking can be used together)

    AC_TRY_RUN( `cat config/flock-uses-fcntl.c`,

                AC_MSG_RESULT("yes"),

                AC_MSG_RESULT("no"); AC_MSG_ERROR([[You selected both flock and fcntl locking, which won't work on this system.]]),

                AC_MSG_ERROR( [[Sorry, can't perform the fcntl and flock deadlock test if you're cross compiling.]] ) )

fi

AC_SUBST(ac_aux_dir)
AC_SUBST(mysql_root)

AC_OUTPUT(Makefile init.d/Makefile config/Makefile)
